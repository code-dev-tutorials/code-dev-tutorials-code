import React from 'react';
import { P } from '../Base';

interface ICategoryDataProps {
  category: string;
}

export const CategoryData = ({ category, }: ICategoryDataProps) => {
  const categoryData = {
    Programming: (
      <P>이 코스에서는 프로그래밍을 다루기에 앞서 프로그래밍이란 무엇인가에 대해 파고들어보는 시간을 가집니다. 프로그래밍에 대한 이야기를 하기 위해서는 컴퓨터와 프로그램에 대한 이야기부터 해야합니다. 컴퓨터의 역사와 프로그램의 등장배경, 프로그래밍 언어의 종류까지 살펴봅시다.</P>
    ),
    WebInternet: (
      <P>이 코스에서는 웹과 인터넷에 대해서 알아보는 시간을 가집니다. 웹개발을 주력으로 공부할 분들은 웹과 인터넷의 개념과 그 차이를 잘 알고있어야 때문에 이 코스를 건너뛰는 것을 추천하지 않습니다. 하지만 이 코스는 짧습니다. 안심하세요.</P>
    ),
    HTML: (
      <P>이 코스에서는 HTML을 익히는 시간을 가집니다. HTML은 CSS, JavaScript와 더불어 웹의 3요소이고 웹의 뼈대를 만드는 역할을 합니다. 웹의 기본이며 그렇기 때문에 웹개발을 한다면 모두가 알아야하는 언어이기도 합니다.</P>
    ),
    CSS: (
      <P>이 코스에서는 CSS를 익히는 시간을 가집니다. CSS는 웹의 디자인을 담당하는 언어로 스타일시트언어입니다. HTML과 JavaScript와 함께 웹의 3요소라고 불립니다. CSS가 있다면 어떠한 디자인이든 만들어낼 수 있습니다. 디자인적 감각은 없더라도 CSS는 알아야합니다.</P>
    ),
    JavaScript: (
      <P>이 코스에서는 JavaScript(이하 자바스크립트)를 익히는 시간을 가집니다. 자바스크립트는 HTML, CSS와 더불어 웹의 3요소 중 하나이며 웹의 모든 것을 조작할 수 있는 뇌, 근육에 해당하는 스크립트 언어, 프로그래밍 언어입니다. 자바스크립트를 배우면 신세계를 경험하게 됩니다.</P>
    ),
    TypeScript: (
      <P>이 코스에서는 TypeScript(이하 타입스크립트)를 익히는 시간을 가집니다. 타입스크립트는 자바스크립트의 슈퍼셋(Superset) 언어입니다. 자바스크립트와의 차이점은 타입을 명시함으로써 타입을 강제하게 할 수 있기 때문에 편리한 개발을 할 수 있다는 점입니다. 타입스크립트를 배우면, 다시는 자바스크립트로 돌아갈 수 없게 될 겁니다.</P>
    ),
    NodeJS: (
      <P>이 코스에서는 NodeJS(이하 노드)에 대해서 익히를 시간을 가집니다. 노드는 웹에서만 동작하는 자바스크립트를 웹이 아닌 환경에서도 동작할 수 있도록 만들어주는 런타임 환경입니다. 노드의 등장으로 자바스크립트의 생태계는 많은 변화를 가졌고 엄청나게 거대해졌습니다. 프론트엔드 개발이나 백엔드 개발을 위해서는 이 노드에 대해서 반드시 알고 넘어가야만 합니다.</P>
    ),
    Webpack: (
      <P>이 코스에서는 웹팩에 대해서 알아보는 시간을 가집니다. 웹팩은 자바스크립트 기반의 번들러입니다. 여러가지의 파일을 하나의 파일로 만들어주는 파격적인 기능을 갖고 있습니다. 다음 코스에서 만나게 될 ReactJS나 VueJS를 사용하기 위해서는 웹팩이 필요합니다. 다소 복잡할 수 있지만 방법만 알면 그렇게 어렵지 않습니다.</P>
    ),
    ReactJS: (
      <P>이 코스에서는 ReactJS(이하 리액트)를 익히는 시간을 가집니다. 리액트는 페이스북에서 개발한 자바스크립트 라이브러리로, 과거의 제이쿼리처럼 웹개발을 편하게 할 수 있도록 만들어주는 라이브러리입니다. 리액트는 좀 더 독특하고 특별합니다. 가상 DOM을 활용하고 있으며 자바스크립트 안에서 HTML을 다룰 수 있는 jsx라는 문법을 갖고 있기 때문입니다. 리액트를 이용해서 SPA를 구축해보는 것도 좋은 경험이 될 것입니다.</P>
    ),
    NextJS: (
      <P>이 코스에서는 NextJS(이하 넥스트)를 익히는 시간을 가집니다. 넥스트는 리액트 프레임워크입니다. 아주 간단하게 각 페이지를 구현할 수 있고 링크도 간단하게 구현할 수 있습니다. 넥스트는 내부적으로 웹팩을 사용하며 서버 사이드 렌더링(SSR)이 가능하고, 정적 페이지 생성(SSG)도 가능합니다. 넥스트를 익힌 후 원하는 방향의 기술을 사용하면 되겠습니다.</P>
    ),
    VueJS: (
      <P>이 코스에서는 VueJS(이하 뷰)를 익히는 시간을 가집니다. 뷰는 리액트처럼 가상 DOM을 활용한 개발이 가능한 자바스크립트 프레임워크입니다. vue라는 확장자를 이용하고 이를 사용하기 위해서는 웹팩이 필요합니다. 뷰는 하나의 파일 안에서 HTML, CSS, 자바스크립트 전부를 다룰 수 있습니다. 리액트랑 비슷한 발상으로 시작됐기 때문에 마찬가지로 SPA에 특화되어있습니다.</P>
    ),
    NuxtJS: (
      <P>이 코스에서는 NuxtJS(이하 넉스트)를 익히는 시간을 가집니다. 넉스트는 NextJS(이하 넥스트)의 영향을 받아 탄생하게 된 VueJS를 이용한 프레임워크입니다. 간단하게 웹 사이트를 구축할 수 있습니다. 넥스트처럼 SSR이 가능하고 SSG가 가능합니다. 내부적으로 웹팩을 사용하기 때문에 넉스트만 설치하면 웹사이트 개발을 시작할 수 있습니다.</P>
    ),
    SCSS: (
      <P>이 코스에서는 SCSS를 익히는 시간을 가집니다. SCSS는 CSS의 전처리기이며 SASS의 불편한 가독성을 CSS처럼 선택자마다 블럭으로 구분함으로써 개선시킨 확장 언어입니다. 이 코스에서는 SASS와 SCSS가 어떻게 다른 것인지도 함께 다룹니다. 다른 CSS 전처리기들은 기회가 되면 다뤄보도록 하겠습니다.</P>
    ),
    StyledComponents: (
      <P>이 코스에서는 StyledComponents를 익히는 시간을 가집니다. 스타일드 컴포넌트는 리액트 내부에서 CSS를 이용할 수 있게 만들어주는 라이브러리입니다. 자바스크립트 내부에서 CSS를 사용하는 개념을 CSS in JS라고 하는데 가장 유명한 CSS in JS가 바로 스타일드 컴포넌트입니다. 스타일이 적용된 컴포넌트를 만들어서 재사용성 있는 개발을 경험할 수 있을 것입니다.</P>
    ),
    Emotion: (
      <P>이 코스에서는 Emotion(이하 이모션)을 익히는 시간을 가집니다. 이모션은 리액트에서 스타일링을 할 수 있는 CSS in JS의 일종입니다. StyledComponents와 사용법이 거의 비슷해서 익히는데 어려움이 없습니다. 물론 다른 점도 있기 때문에 비교해보는 재미도 있을 것입니다.</P>
    ),
    TailwindCSS: (
      <P>이 코스에서는 TwilwindCSS(이하 테일윈드)를 익히는 시간을 가집니다. 테일윈드는 CSS 파일을 직접 건드리는 대신에 HTML의 클래스 이름을 이용해서 빠르고 간결하게 스타일링을 할 수 있게끔 만들어주는 CSS 프레임워크입니다. 적용하고 싶은 스타일의 클래스 이름을 외워야한다는 단점과 모양이 그다지 이쁘지 않다는 단점이 있지만 일단 배우고나면 편하게 스타일링을 할 수 있다는 점이 가장 큰 장점으로 다가옵니다.</P>
    ),
    ExpressJS: (
      <P>이 코스에서는 ExpressJS(이하 익스프레스)를 익히는 시간을 가집니다. 익스프레스는 대표적인 자바스크립트 백엔드 웹 프레임워크입니다. 쉽고 간결하게 다양한 기능과 API를 구축할 수 있습니다. 익스프레스와 연동되는 다양한 기술들이 있기 때문에 강력한 웹 서버를 구축할 수 있습니다.</P>
    ),
    NestJS: (
      <P>이 코스에서는 NestJS(이하 네스트)를 익히는 시간을 가집니다. 네스트는 타입스크립트를 사용하는 것을 강제하며 타입스크립트라는 강력한 도구 덕분에 편한 백엔드 개발이 가능합니다. 또한 네스트는 내부적으로 ExpressJS(이하 익스프레스)의 위에서 동작합니다. 익스프레스와 네스트를 비교하면서 어떤 것이 다른지 알아보는 것도 좋은 경험이 될 것입니다.</P>
    ),
  };
  return (
    <>
      {categoryData[category]}
    </>
  );
};
